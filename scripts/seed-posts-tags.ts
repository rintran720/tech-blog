import { supabase } from "../src/lib/supabase";
import { generateId } from "../src/lib/uuid";

async function seedTags() {
  console.log("üå± Seeding tags...");

  const tags = [
    {
      name: "JavaScript",
      slug: "javascript",
      color: "#F7DF1E",
    },
    {
      name: "TypeScript",
      slug: "typescript",
      color: "#3178C6",
    },
    {
      name: "React",
      slug: "react",
      color: "#61DAFB",
    },
    {
      name: "Next.js",
      slug: "nextjs",
      color: "#000000",
    },
    {
      name: "Node.js",
      slug: "nodejs",
      color: "#339933",
    },
    {
      name: "Supabase",
      slug: "supabase",
      color: "#3ECF8E",
    },
    {
      name: "Database",
      slug: "database",
      color: "#336791",
    },
    {
      name: "Web Development",
      slug: "web-development",
      color: "#FF6B6B",
    },
    {
      name: "Frontend",
      slug: "frontend",
      color: "#4ECDC4",
    },
    {
      name: "Backend",
      slug: "backend",
      color: "#45B7D1",
    },
    {
      name: "API",
      slug: "api",
      color: "#96CEB4",
    },
    {
      name: "Authentication",
      slug: "authentication",
      color: "#FFEAA7",
    },
    {
      name: "Security",
      slug: "security",
      color: "#DDA0DD",
    },
    {
      name: "Performance",
      slug: "performance",
      color: "#98D8C8",
    },
    {
      name: "Tutorial",
      slug: "tutorial",
      color: "#F7DC6F",
    },
  ];

  const createdTags: any[] = [];

  for (const tag of tags) {
    const { data: existing } = await supabase
      .from("jt_tags")
      .select("id")
      .eq("slug", tag.slug)
      .single();

    if (!existing) {
      const tagId = generateId();
      const { error } = await supabase.from("jt_tags").insert({
        id: tagId,
        name: tag.name,
        slug: tag.slug,
        color: tag.color,
        createdAt: new Date().toISOString(),
      });

      if (error) {
        console.error(`‚ùå Failed to create tag ${tag.slug}:`, error);
      } else {
        console.log(`‚úÖ Created tag: ${tag.name}`);
        createdTags.push({ id: tagId, ...tag });
      }
    } else {
      console.log(`‚ÑπÔ∏è Tag already exists: ${tag.name}`);
      createdTags.push({ id: existing.id, ...tag });
    }
  }

  return createdTags;
}

async function seedSamplePosts(tags: any[]) {
  console.log("üå± Seeding sample posts...");

  // Get admin user
  const { data: adminUser } = await supabase
    .from("jt_users")
    .select("id")
    .eq("email", process.env.ADMIN_EMAIL || "admin@example.com")
    .single();

  if (!adminUser) {
    console.error(
      "‚ùå Admin user not found. Please run admin user seeding first."
    );
    return;
  }

  const posts = [
    {
      title: "Gi·ªõi thi·ªáu v·ªÅ Next.js 15 v√† App Router",
      slug: "gioi-thieu-nextjs-15-app-router",
      content: `# Gi·ªõi thi·ªáu v·ªÅ Next.js 15 v√† App Router

Next.js 15 ƒë√£ mang ƒë·∫øn nhi·ªÅu c·∫£i ti·∫øn ƒë√°ng k·ªÉ, ƒë·∫∑c bi·ªát l√† v·ªõi App Router m·ªõi. Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ nh·ªØng t√≠nh nƒÉng m·ªõi v√† c√°ch s·ª≠ d·ª•ng ch√∫ng.

## App Router l√† g√¨?

App Router l√† m·ªôt ki·∫øn tr√∫c routing m·ªõi trong Next.js 13+ cho ph√©p b·∫°n x√¢y d·ª±ng ·ª©ng d·ª•ng React v·ªõi c√°c t√≠nh nƒÉng m·∫°nh m·∫Ω h∆°n:

- **Server Components**: Render components tr√™n server
- **Streaming**: Load n·ªôi dung theo t·ª´ng ph·∫ßn
- **Nested Layouts**: T·∫°o layout ph·ª©c t·∫°p d·ªÖ d√†ng
- **Loading States**: Qu·∫£n l√Ω tr·∫°ng th√°i loading t·ª± ƒë·ªông

## C√°ch s·ª≠ d·ª•ng App Router

\`\`\`typescript
// app/page.tsx
export default function HomePage() {
  return (
    <div>
      <h1>Welcome to Next.js 15!</h1>
      <p>This is a server component.</p>
    </div>
  );
}
\`\`\`

## K·∫øt lu·∫≠n

App Router mang l·∫°i tr·∫£i nghi·ªám ph√°t tri·ªÉn t·ªët h∆°n v√† hi·ªáu su·∫•t cao h∆°n cho ·ª©ng d·ª•ng Next.js c·ªßa b·∫°n.`,
      excerpt:
        "T√¨m hi·ªÉu v·ªÅ Next.js 15 v√† App Router - nh·ªØng t√≠nh nƒÉng m·ªõi gi√∫p x√¢y d·ª±ng ·ª©ng d·ª•ng React hi·ªáu qu·∫£ h∆°n.",
      category: "Web Development",
      tagSlugs: ["nextjs", "react", "web-development", "frontend"],
    },
    {
      title: "X√¢y d·ª±ng API v·ªõi Supabase v√† Next.js",
      slug: "xay-dung-api-supabase-nextjs",
      content: `# X√¢y d·ª±ng API v·ªõi Supabase v√† Next.js

Supabase l√† m·ªôt Backend-as-a-Service (BaaS) m·∫°nh m·∫Ω gi√∫p b·∫°n x√¢y d·ª±ng ·ª©ng d·ª•ng web nhanh ch√≥ng. Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch t√≠ch h·ª£p Supabase v·ªõi Next.js.

## T·∫°i sao ch·ªçn Supabase?

- **PostgreSQL Database**: Database quan h·ªá m·∫°nh m·∫Ω
- **Real-time Subscriptions**: C·∫≠p nh·∫≠t d·ªØ li·ªáu theo th·ªùi gian th·ª±c
- **Authentication**: H·ªá th·ªëng x√°c th·ª±c t√≠ch h·ª£p s·∫µn
- **Storage**: L∆∞u tr·ªØ file ƒë∆°n gi·∫£n
- **Edge Functions**: Ch·∫°y serverless functions

## C√†i ƒë·∫∑t Supabase

\`\`\`bash
npm install @supabase/supabase-js
\`\`\`

## C·∫•u h√¨nh Supabase Client

\`\`\`typescript
// lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseKey)
\`\`\`

## S·ª≠ d·ª•ng trong API Routes

\`\`\`typescript
// app/api/posts/route.ts
import { supabase } from '@/lib/supabase'

export async function GET() {
  const { data, error } = await supabase
    .from('posts')
    .select('*')
    .order('created_at', { ascending: false })

  if (error) {
    return Response.json({ error: error.message }, { status: 500 })
  }

  return Response.json({ posts: data })
}
\`\`\`

## K·∫øt lu·∫≠n

Supabase gi√∫p b·∫°n t·∫≠p trung v√†o vi·ªác x√¢y d·ª±ng t√≠nh nƒÉng thay v√¨ qu·∫£n l√Ω infrastructure.`,
      excerpt:
        "H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch t√≠ch h·ª£p Supabase v·ªõi Next.js ƒë·ªÉ x√¢y d·ª±ng API m·∫°nh m·∫Ω v√† hi·ªáu qu·∫£.",
      category: "Backend",
      tagSlugs: ["supabase", "nextjs", "api", "database", "backend"],
    },
    {
      title: "Authentication v·ªõi NextAuth.js v√† Google OAuth",
      slug: "authentication-nextauth-google-oauth",
      content: `# Authentication v·ªõi NextAuth.js v√† Google OAuth

NextAuth.js l√† th∆∞ vi·ªán authentication ph·ªï bi·∫øn cho Next.js. Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch thi·∫øt l·∫≠p Google OAuth v·ªõi NextAuth.js.

## T·∫°i sao ch·ªçn NextAuth.js?

- **Multiple Providers**: H·ªó tr·ª£ nhi·ªÅu nh√† cung c·∫•p OAuth
- **Session Management**: Qu·∫£n l√Ω session t·ª± ƒë·ªông
- **TypeScript Support**: H·ªó tr·ª£ TypeScript ƒë·∫ßy ƒë·ªß
- **Database Adapters**: T√≠ch h·ª£p v·ªõi nhi·ªÅu database
- **Security**: B·∫£o m·∫≠t cao v·ªõi JWT v√† session

## C√†i ƒë·∫∑t NextAuth.js

\`\`\`bash
npm install next-auth
\`\`\`

## C·∫•u h√¨nh Google OAuth

ƒê·∫ßu ti√™n, b·∫°n c·∫ßn t·∫°o Google OAuth credentials t·∫°i [Google Cloud Console](https://console.cloud.google.com/).

\`\`\`typescript
// lib/auth.ts
import { NextAuthOptions } from 'next-auth'
import GoogleProvider from 'next-auth/providers/google'

export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async session({ session }) {
      // Customize session data
      return session
    },
  },
}
\`\`\`

## API Route cho Authentication

\`\`\`typescript
// app/api/auth/[...nextauth]/route.ts
import NextAuth from 'next-auth'
import { authOptions } from '@/lib/auth'

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }
\`\`\`

## S·ª≠ d·ª•ng trong Components

\`\`\`typescript
// components/auth-button.tsx
import { useSession, signIn, signOut } from 'next-auth/react'

export default function AuthButton() {
  const { data: session } = useSession()

  if (session) {
    return (
      <div>
        <p>Signed in as {session.user?.email}</p>
        <button onClick={() => signOut()}>Sign out</button>
      </div>
    )
  }

  return (
    <button onClick={() => signIn('google')}>
      Sign in with Google
    </button>
  )
}
\`\`\`

## K·∫øt lu·∫≠n

NextAuth.js gi√∫p b·∫°n t√≠ch h·ª£p authentication m·ªôt c√°ch d·ªÖ d√†ng v√† b·∫£o m·∫≠t.`,
      excerpt:
        "H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch thi·∫øt l·∫≠p Google OAuth authentication v·ªõi NextAuth.js trong Next.js.",
      category: "Security",
      tagSlugs: [
        "authentication",
        "nextauth",
        "google-oauth",
        "security",
        "tutorial",
      ],
    },
    {
      title: "T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t React v·ªõi useMemo v√† useCallback",
      slug: "toi-uu-hieu-suat-react-usememo-usecallback",
      content: `# T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t React v·ªõi useMemo v√† useCallback

React cung c·∫•p nhi·ªÅu hooks ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t ·ª©ng d·ª•ng. Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ useMemo v√† useCallback.

## useMemo - Memoization cho gi√° tr·ªã

useMemo gi√∫p b·∫°n "ghi nh·ªõ" k·∫øt qu·∫£ c·ªßa m·ªôt ph√©p t√≠nh v√† ch·ªâ t√≠nh to√°n l·∫°i khi dependencies thay ƒë·ªïi.

\`\`\`typescript
import { useMemo } from 'react'

function ExpensiveComponent({ items, filter }) {
  const filteredItems = useMemo(() => {
    return items.filter(item => item.category === filter)
  }, [items, filter])

  return (
    <div>
      {filteredItems.map(item => (
        <div key={item.id}>{item.name}</div>
      ))}
    </div>
  )
}
\`\`\`

## useCallback - Memoization cho functions

useCallback gi√∫p b·∫°n "ghi nh·ªõ" m·ªôt function v√† ch·ªâ t·∫°o l·∫°i khi dependencies thay ƒë·ªïi.

\`\`\`typescript
import { useCallback } from 'react'

function ParentComponent() {
  const [count, setCount] = useState(0)
  const [name, setName] = useState('')

  const handleClick = useCallback(() => {
    console.log('Button clicked!')
  }, [])

  const handleNameChange = useCallback((newName: string) => {
    setName(newName)
  }, [])

  return (
    <div>
      <ChildComponent onClick={handleClick} />
      <NameInput onChange={handleNameChange} />
    </div>
  )
}
\`\`\`

## Khi n√†o n√™n s·ª≠ d·ª•ng?

### S·ª≠ d·ª•ng useMemo khi:
- T√≠nh to√°n ph·ª©c t·∫°p v√† t·ªën k√©m
- T·∫°o objects/arrays m·ªõi trong render
- Dependencies √≠t thay ƒë·ªïi

### S·ª≠ d·ª•ng useCallback khi:
- Truy·ªÅn functions xu·ªëng child components
- Functions ƒë∆∞·ª£c s·ª≠ d·ª•ng trong useEffect dependencies
- Child components ƒë∆∞·ª£c memoized v·ªõi React.memo

## V√≠ d·ª• th·ª±c t·∫ø

\`\`\`typescript
import { useMemo, useCallback, memo } from 'react'

interface User {
  id: string
  name: string
  email: string
  age: number
}

interface UserListProps {
  users: User[]
  searchTerm: string
  onUserSelect: (user: User) => void
}

const UserItem = memo(({ user, onSelect }: { user: User; onSelect: (user: User) => void }) => {
  return (
    <div onClick={() => onSelect(user)}>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
    </div>
  )
})

function UserList({ users, searchTerm, onUserSelect }: UserListProps) {
  const filteredUsers = useMemo(() => {
    return users.filter(user => 
      user.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
  }, [users, searchTerm])

  const handleUserSelect = useCallback((user: User) => {
    onUserSelect(user)
  }, [onUserSelect])

  return (
    <div>
      {filteredUsers.map(user => (
        <UserItem 
          key={user.id} 
          user={user} 
          onSelect={handleUserSelect}
        />
      ))}
    </div>
  )
}
\`\`\`

## K·∫øt lu·∫≠n

useMemo v√† useCallback l√† nh·ªØng c√¥ng c·ª• m·∫°nh m·∫Ω ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t React. Tuy nhi√™n, h√£y s·ª≠ d·ª•ng ch√∫ng m·ªôt c√°ch th√¥ng minh v√† ch·ªâ khi th·ª±c s·ª± c·∫ßn thi·∫øt.`,
      excerpt:
        "T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng useMemo v√† useCallback ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t React application.",
      category: "Performance",
      tagSlugs: [
        "react",
        "performance",
        "usememo",
        "usecallback",
        "optimization",
      ],
    },
    {
      title: "TypeScript Best Practices cho React Developers",
      slug: "typescript-best-practices-react-developers",
      content: `# TypeScript Best Practices cho React Developers

TypeScript gi√∫p b·∫°n vi·∫øt code React an to√†n v√† d·ªÖ b·∫£o tr√¨ h∆°n. Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°c best practices quan tr·ªçng.

## 1. ƒê·ªãnh nghƒ©a Props Interface

Lu√¥n ƒë·ªãnh nghƒ©a interface cho component props:

\`\`\`typescript
interface ButtonProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  onClick?: () => void
}

function Button({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  disabled = false,
  onClick 
}: ButtonProps) {
  return (
    <button 
      className={\`btn btn-\${variant} btn-\${size}\`}
      disabled={disabled}
      onClick={onClick}
    >
      {children}
    </button>
  )
}
\`\`\`

## 2. S·ª≠ d·ª•ng Generic Types

Generic types gi√∫p b·∫°n t·∫°o reusable components:

\`\`\`typescript
interface ListProps<T> {
  items: T[]
  renderItem: (item: T) => React.ReactNode
  keyExtractor: (item: T) => string
}

function List<T>({ items, renderItem, keyExtractor }: ListProps<T>) {
  return (
    <ul>
      {items.map(item => (
        <li key={keyExtractor(item)}>
          {renderItem(item)}
        </li>
      ))}
    </ul>
  )
}

// Usage
const users = [
  { id: '1', name: 'John', email: 'john@example.com' },
  { id: '2', name: 'Jane', email: 'jane@example.com' }
]

<List
  items={users}
  renderItem={(user) => <span>{user.name} - {user.email}</span>}
  keyExtractor={(user) => user.id}
/>
\`\`\`

## 3. Event Handlers v·ªõi Type Safety

\`\`\`typescript
interface FormProps {
  onSubmit: (data: FormData) => void
}

interface FormData {
  name: string
  email: string
  age: number
}

function Form({ onSubmit }: FormProps) {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    
    const formData = new FormData(e.currentTarget)
    const data: FormData = {
      name: formData.get('name') as string,
      email: formData.get('email') as string,
      age: parseInt(formData.get('age') as string)
    }
    
    onSubmit(data)
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="name" type="text" required />
      <input name="email" type="email" required />
      <input name="age" type="number" required />
      <button type="submit">Submit</button>
    </form>
  )
}
\`\`\`

## 4. Custom Hooks v·ªõi TypeScript

\`\`\`typescript
interface UseApiResult<T> {
  data: T | null
  loading: boolean
  error: string | null
  refetch: () => void
}

function useApi<T>(url: string): UseApiResult<T> {
  const [data, setData] = useState<T | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchData = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      
      const response = await fetch(url)
      if (!response.ok) {
        throw new Error(\`HTTP error! status: \${response.status}\`)
      }
      
      const result = await response.json()
      setData(result)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred')
    } finally {
      setLoading(false)
    }
  }, [url])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  return { data, loading, error, refetch: fetchData }
}
\`\`\`

## 5. API Response Types

\`\`\`typescript
interface ApiResponse<T> {
  data: T
  message: string
  success: boolean
}

interface User {
  id: string
  name: string
  email: string
}

// Usage
const { data, loading, error } = useApi<ApiResponse<User[]>>('/api/users')

if (loading) return <div>Loading...</div>
if (error) return <div>Error: {error}</div>
if (data?.success) {
  return (
    <div>
      {data.data.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  )
}
\`\`\`

## 6. Utility Types

S·ª≠ d·ª•ng utility types ƒë·ªÉ t·∫°o types m·ªõi t·ª´ types c√≥ s·∫µn:

\`\`\`typescript
interface User {
  id: string
  name: string
  email: string
  password: string
  createdAt: Date
}

// T·∫°o type cho form input (lo·∫°i b·ªè id, password, createdAt)
type UserFormData = Omit<User, 'id' | 'password' | 'createdAt'>

// T·∫°o type cho user update (t·∫•t c·∫£ fields optional)
type UserUpdateData = Partial<Pick<User, 'name' | 'email'>>

// T·∫°o type cho user display (ch·ªâ hi·ªÉn th·ªã m·ªôt s·ªë fields)
type UserDisplay = Pick<User, 'id' | 'name' | 'email'>
\`\`\`

## K·∫øt lu·∫≠n

TypeScript gi√∫p b·∫°n vi·∫øt code React an to√†n v√† d·ªÖ b·∫£o tr√¨. H√£y √°p d·ª•ng nh·ªØng best practices n√†y ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa s·ª©c m·∫°nh c·ªßa TypeScript.`,
      excerpt:
        "C√°c best practices quan tr·ªçng khi s·ª≠ d·ª•ng TypeScript v·ªõi React ƒë·ªÉ vi·∫øt code an to√†n v√† d·ªÖ b·∫£o tr√¨.",
      category: "Frontend",
      tagSlugs: [
        "typescript",
        "react",
        "frontend",
        "best-practices",
        "tutorial",
      ],
    },
  ];

  for (const post of posts) {
    const { data: existing } = await supabase
      .from("jt_posts")
      .select("id")
      .eq("slug", post.slug)
      .single();

    if (!existing) {
      const postId = generateId();
      const { error: postError } = await supabase.from("jt_posts").insert({
        id: postId,
        title: post.title,
        slug: post.slug,
        content: post.content,
        excerpt: post.excerpt,
        published: true,
        featured: Math.random() > 0.7, // Random featured
        category: post.category,
        hotScore: Math.floor(Math.random() * 100),
        authorId: adminUser.id,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      });

      if (postError) {
        console.error(`‚ùå Failed to create post ${post.slug}:`, postError);
        continue;
      }

      console.log(`‚úÖ Created post: ${post.title}`);

      // Add tags to post
      for (const tagSlug of post.tagSlugs) {
        const tag = tags.find((t) => t.slug === tagSlug);
        if (tag) {
          const { error: tagError } = await supabase
            .from("jt_post_tags")
            .insert({
              postId: postId,
              tagId: tag.id,
            });

          if (tagError) {
            console.error(
              `‚ùå Failed to add tag ${tagSlug} to post ${post.slug}:`,
              tagError
            );
          }
        }
      }
    } else {
      console.log(`‚ÑπÔ∏è Post already exists: ${post.title}`);
    }
  }
}

async function main() {
  try {
    console.log("üöÄ Starting tags and posts seeding...");

    const tags = await seedTags();
    await seedSamplePosts(tags);

    console.log("‚úÖ Tags and posts seeding completed!");
  } catch (error) {
    console.error("‚ùå Tags and posts seeding failed:", error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

export { seedTags, seedSamplePosts };
